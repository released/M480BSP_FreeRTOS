; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\heap_2.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\heap_2.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -I..\..\..\ThirdParty\FreeRTOS\Source\include -I..\..\..\ThirdParty\FreeRTOS\Demo\Common\include -I..\..\..\ThirdParty\FreeRTOS\Source\portable\RVDS\ARM_CM4F -I..\..\..\ThirdParty\FreeRTOS -I..\..\Template -I..\CPU -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\heap_2.crf ..\..\..\ThirdParty\FreeRTOS\Source\portable\MemMang\heap_2.c]
                          THUMB

                          AREA ||i.pvPortMalloc||, CODE, READONLY, ALIGN=2

                  pvPortMalloc PROC
;;;118    
;;;119    void *pvPortMalloc( size_t xWantedSize )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;120    {
000004  4604              MOV      r4,r0
;;;121    BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
;;;122    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
;;;123    void *pvReturn = NULL;
000006  2500              MOVS     r5,#0
;;;124    
;;;125    	vTaskSuspendAll();
000008  f7fffffe          BL       vTaskSuspendAll
;;;126    	{
;;;127    		/* If this is the first call to malloc then the heap will require
;;;128    		initialisation to setup the list of free blocks. */
;;;129    		if( xHeapHasBeenInitialised == pdFALSE )
00000c  4e29              LDR      r6,|L1.180|
00000e  f1060108          ADD      r1,r6,#8
000012  6870              LDR      r0,[r6,#4]  ; xHeapHasBeenInitialised
000014  f1010308          ADD      r3,r1,#8
000018  b968              CBNZ     r0,|L1.54|
00001a  4827              LDR      r0,|L1.184|
00001c  2700              MOVS     r7,#0
00001e  f0200007          BIC      r0,r0,#7
000022  e9c10700          STRD     r0,r7,[r1,#0]
000026  f64372f8          MOV      r2,#0x3ff8
00002a  e9c37200          STRD     r7,r2,[r3,#0]
00002e  e9c03200          STRD     r3,r2,[r0,#0]
;;;130    		{
;;;131    			prvHeapInit();
;;;132    			xHeapHasBeenInitialised = pdTRUE;
000032  2001              MOVS     r0,#1
000034  6070              STR      r0,[r6,#4]  ; xHeapHasBeenInitialised
                  |L1.54|
;;;133    		}
;;;134    
;;;135    		/* The wanted size is increased so it can contain a BlockLink_t
;;;136    		structure in addition to the requested amount of bytes. */
;;;137    		if( xWantedSize > 0 )
000036  b13c              CBZ      r4,|L1.72|
000038  3408              ADDS     r4,r4,#8
;;;138    		{
;;;139    			xWantedSize += heapSTRUCT_SIZE;
;;;140    
;;;141    			/* Ensure that blocks are always aligned to the required number of bytes. */
;;;142    			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
00003a  0760              LSLS     r0,r4,#29
00003c  d004              BEQ      |L1.72|
;;;143    			{
;;;144    				/* Byte alignment required. */
;;;145    				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
00003e  f0040007          AND      r0,r4,#7
000042  f1c00008          RSB      r0,r0,#8
000046  4404              ADD      r4,r4,r0
                  |L1.72|
;;;146    			}
;;;147    		}
;;;148    
;;;149    		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
000048  1e60              SUBS     r0,r4,#1
00004a  f64372f7          MOV      r2,#0x3ff7
00004e  4290              CMP      r0,r2
000050  d227              BCS      |L1.162|
;;;150    		{
;;;151    			/* Blocks are stored in byte order - traverse the list from the start
;;;152    			(smallest) block until one of adequate size is found. */
;;;153    			pxPreviousBlock = &xStart;
000052  4a18              LDR      r2,|L1.180|
;;;154    			pxBlock = xStart.pxNextFreeBlock;
000054  6809              LDR      r1,[r1,#0]  ; xStart
000056  3208              ADDS     r2,r2,#8              ;153
;;;155    			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
000058  e001              B        |L1.94|
                  |L1.90|
;;;156    			{
;;;157    				pxPreviousBlock = pxBlock;
00005a  460a              MOV      r2,r1
;;;158    				pxBlock = pxBlock->pxNextFreeBlock;
00005c  4601              MOV      r1,r0
                  |L1.94|
00005e  6848              LDR      r0,[r1,#4]            ;155
000060  42a0              CMP      r0,r4                 ;155
000062  d202              BCS      |L1.106|
000064  6808              LDR      r0,[r1,#0]            ;155
000066  2800              CMP      r0,#0                 ;155
000068  d1f7              BNE      |L1.90|
                  |L1.106|
;;;159    			}
;;;160    
;;;161    			/* If we found the end marker then a block of adequate size was not found. */
;;;162    			if( pxBlock != &xEnd )
00006a  4299              CMP      r1,r3
00006c  d019              BEQ      |L1.162|
;;;163    			{
;;;164    				/* Return the memory space - jumping over the BlockLink_t structure
;;;165    				at its start. */
;;;166    				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
;;;167    
;;;168    				/* This block is being returned for use so must be taken out of the
;;;169    				list of free blocks. */
;;;170    				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
00006e  6815              LDR      r5,[r2,#0]
000070  6808              LDR      r0,[r1,#0]
;;;171    
;;;172    				/* If the block is larger than required it can be split into two. */
;;;173    				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
000072  6010              STR      r0,[r2,#0]
000074  6848              LDR      r0,[r1,#4]
000076  3508              ADDS     r5,r5,#8
000078  1b00              SUBS     r0,r0,r4
00007a  2810              CMP      r0,#0x10
00007c  d90d              BLS      |L1.154|
;;;174    				{
;;;175    					/* This block is to be split into two.  Create a new block
;;;176    					following the number of bytes requested. The void cast is
;;;177    					used to prevent byte alignment warnings from the compiler. */
;;;178    					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
00007e  190b              ADDS     r3,r1,r4
;;;179    
;;;180    					/* Calculate the sizes of two blocks split from the single
;;;181    					block. */
;;;182    					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
;;;183    					pxBlock->xBlockSize = xWantedSize;
000080  6058              STR      r0,[r3,#4]
;;;184    
;;;185    					/* Insert the new block into the list of free blocks. */
;;;186    					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
000082  480c              LDR      r0,|L1.180|
000084  604c              STR      r4,[r1,#4]
000086  3008              ADDS     r0,r0,#8
000088  685c              LDR      r4,[r3,#4]
00008a  e000              B        |L1.142|
                  |L1.140|
00008c  4610              MOV      r0,r2
                  |L1.142|
00008e  6802              LDR      r2,[r0,#0]
000090  6857              LDR      r7,[r2,#4]
000092  42a7              CMP      r7,r4
000094  d3fa              BCC      |L1.140|
000096  601a              STR      r2,[r3,#0]
000098  6003              STR      r3,[r0,#0]
                  |L1.154|
;;;187    				}
;;;188    
;;;189    				xFreeBytesRemaining -= pxBlock->xBlockSize;
00009a  6848              LDR      r0,[r1,#4]
00009c  6831              LDR      r1,[r6,#0]  ; xFreeBytesRemaining
00009e  1a08              SUBS     r0,r1,r0
0000a0  6030              STR      r0,[r6,#0]  ; xFreeBytesRemaining
                  |L1.162|
;;;190    			}
;;;191    		}
;;;192    
;;;193    		traceMALLOC( pvReturn, xWantedSize );
;;;194    	}
;;;195    	( void ) xTaskResumeAll();
0000a2  f7fffffe          BL       xTaskResumeAll
;;;196    
;;;197    	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
;;;198    	{
;;;199    		if( pvReturn == NULL )
0000a6  b90d              CBNZ     r5,|L1.172|
;;;200    		{
;;;201    			extern void vApplicationMallocFailedHook( void );
;;;202    			vApplicationMallocFailedHook();
0000a8  f7fffffe          BL       vApplicationMallocFailedHook
                  |L1.172|
;;;203    		}
;;;204    	}
;;;205    	#endif
;;;206    
;;;207    	return pvReturn;
0000ac  4628              MOV      r0,r5
;;;208    }
0000ae  e8bd81f0          POP      {r4-r8,pc}
;;;209    /*-----------------------------------------------------------*/
                          ENDP

0000b2  0000              DCW      0x0000
                  |L1.180|
                          DCD      ||.data||
                  |L1.184|
                          DCD      ||.bss||+0x8

                          AREA ||i.vPortFree||, CODE, READONLY, ALIGN=2

                  vPortFree PROC
;;;210    
;;;211    void vPortFree( void *pv )
000000  b510              PUSH     {r4,lr}
;;;212    {
000002  2800              CMP      r0,#0
000004  d017              BEQ      |L2.54|
000006  f1a00408          SUB      r4,r0,#8
;;;213    uint8_t *puc = ( uint8_t * ) pv;
;;;214    BlockLink_t *pxLink;
;;;215    
;;;216    	if( pv != NULL )
;;;217    	{
;;;218    		/* The memory being freed will have an BlockLink_t structure immediately
;;;219    		before it. */
;;;220    		puc -= heapSTRUCT_SIZE;
;;;221    
;;;222    		/* This unexpected casting is to keep some compilers from issuing
;;;223    		byte alignment warnings. */
;;;224    		pxLink = ( void * ) puc;
;;;225    
;;;226    		vTaskSuspendAll();
00000a  f7fffffe          BL       vTaskSuspendAll
;;;227    		{
;;;228    			/* Add this block to the list of free blocks. */
;;;229    			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
00000e  490a              LDR      r1,|L2.56|
000010  6860              LDR      r0,[r4,#4]
000012  e000              B        |L2.22|
                  |L2.20|
000014  4611              MOV      r1,r2
                  |L2.22|
000016  680a              LDR      r2,[r1,#0]
000018  6853              LDR      r3,[r2,#4]
00001a  4283              CMP      r3,r0
00001c  d3fa              BCC      |L2.20|
;;;230    			xFreeBytesRemaining += pxLink->xBlockSize;
00001e  4806              LDR      r0,|L2.56|
000020  6022              STR      r2,[r4,#0]            ;229
000022  600c              STR      r4,[r1,#0]
000024  3808              SUBS     r0,r0,#8
000026  6861              LDR      r1,[r4,#4]
000028  6802              LDR      r2,[r0,#0]  ; xFreeBytesRemaining
00002a  4411              ADD      r1,r1,r2
;;;231    			traceFREE( pv, pxLink->xBlockSize );
;;;232    		}
;;;233    		( void ) xTaskResumeAll();
00002c  6001              STR      r1,[r0,#0]  ; xFreeBytesRemaining
00002e  e8bd4010          POP      {r4,lr}
000032  f7ffbffe          B.W      xTaskResumeAll
                  |L2.54|
;;;234    	}
;;;235    }
000036  bd10              POP      {r4,pc}
;;;236    /*-----------------------------------------------------------*/
                          ENDP

                  |L2.56|
                          DCD      ||.data||+0x8

                          AREA ||i.vPortInitialiseBlocks||, CODE, READONLY, ALIGN=1

                  vPortInitialiseBlocks PROC
;;;243    
;;;244    void vPortInitialiseBlocks( void )
000000  4770              BX       lr
;;;245    {
;;;246    	/* This just exists to keep the linker quiet. */
;;;247    }
;;;248    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xPortGetFreeHeapSize||, CODE, READONLY, ALIGN=2

                  xPortGetFreeHeapSize PROC
;;;237    
;;;238    size_t xPortGetFreeHeapSize( void )
000000  4801              LDR      r0,|L4.8|
;;;239    {
;;;240    	return xFreeBytesRemaining;
000002  6800              LDR      r0,[r0,#0]  ; xFreeBytesRemaining
;;;241    }
000004  4770              BX       lr
;;;242    /*-----------------------------------------------------------*/
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  ucHeap
                          %        16384

                          AREA ||.data||, DATA, ALIGN=2

                  xFreeBytesRemaining
                          DCD      0x00003ff8
                  xHeapHasBeenInitialised
                          DCD      0x00000000
                  xStart
                          %        8
                  xEnd
                          %        8

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\ThirdParty\\FreeRTOS\\Source\\portable\\MemMang\\heap_2.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_heap_2_c_94e30ff9____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___8_heap_2_c_94e30ff9____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_heap_2_c_94e30ff9____REVSH|
#line 402
|__asm___8_heap_2_c_94e30ff9____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_heap_2_c_94e30ff9____RRX|
#line 587
|__asm___8_heap_2_c_94e30ff9____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
